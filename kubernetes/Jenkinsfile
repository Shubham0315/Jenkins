pipeline {
    agent any

    environment {

        IMAGE_NAME = "your-dockerhub-username/your-app-name"
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = "dockerhub-credentials-id"
        SONARQUBE_ENV = "SonarQubeServer" // Define in Jenkins global config
        KUBE_CONTEXT = "your-kube-context" // Optional if context is already set
        HELM_CHART_DIR = "helm-chart"
        DEPLOY_ENV = "dev" // namespace
    }

    options {
        skipStagesAfterUnstable()
    }

    stages {

        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/your-org/your-repo.git'
            }
        }

        stage('Code Quality - SonarQube') {
            environment {
                scannerHome = tool 'SonarQubeScanner'
            }
            steps {
                withSonarQubeEnv("${SONARQUBE_ENV}") {
                    sh "${scannerHome}/bin/sonar-scanner"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${IMAGE_NAME}:${IMAGE_TAG}")
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', "${REGISTRY_CREDENTIALS}") {
                        docker.image("${IMAGE_NAME}:${IMAGE_TAG}").push()
                    }
                }
            }
        }

        stage('Deploy to Kubernetes (Helm)') {
            steps {
                script {
                    sh """
                        helm upgrade --install ${DEPLOY_ENV}-${IMAGE_NAME} ${HELM_CHART_DIR} \
                          --namespace ${DEPLOY_ENV} \
                          --set image.repository=${IMAGE_NAME} \
                          --set image.tag=${IMAGE_TAG} \
                          --create-namespace
                    """
                }
            }
        }

    }

    post {
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed."
        }
    }
}
